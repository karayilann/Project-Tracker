// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTracker.Repository.Context;

#nullable disable

namespace ProjectTracker.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522171835_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectTracker.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("InAppPrioritiy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for project 1",
                            InAppPrioritiy = 0,
                            Name = "Project 1",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for project 2",
                            InAppPrioritiy = 1,
                            Name = "Project 2",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Entity ilişkilerini test etmek için örnek proje",
                            InAppPrioritiy = 2,
                            Name = "Proje Takip Sistemi",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Takip uygulaması",
                            InAppPrioritiy = 2,
                            Name = "iş Yönetimi Sistemi",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Müşteri ilişkileri yönetimi",
                            InAppPrioritiy = 1,
                            Name = "CRM Yazılımı",
                            Status = 0
                        });
                });

            modelBuilder.Entity("ProjectTracker.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tester"
                        },
                        new
                        {
                            Id = 5,
                            Name = "User"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("ProjectTracker.Core.Entities.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InAppPrioritiy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("WorkItemStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedUserId = 2,
                            Description = "Login ekranı yapılacak",
                            InAppPrioritiy = 2,
                            Name = "Kullanıcı Girişi",
                            ProjectId = 1,
                            WorkItemStatus = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedUserId = 3,
                            Description = "Raporlama eklenecek",
                            InAppPrioritiy = 1,
                            Name = "Raporlama Modülü",
                            ProjectId = 1,
                            WorkItemStatus = 0
                        },
                        new
                        {
                            Id = 3,
                            AssignedUserId = 4,
                            Description = "Listeleme ekranı",
                            InAppPrioritiy = 0,
                            Name = "Müşteri Listesi",
                            ProjectId = 2,
                            WorkItemStatus = 0
                        },
                        new
                        {
                            Id = 4,
                            AssignedUserId = 2,
                            Description = "ProjectController yazılacak",
                            InAppPrioritiy = 1,
                            Name = "API geliştirme",
                            ProjectId = 1,
                            WorkItemStatus = 1
                        });
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("AssignedUsersId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("AssignedUsersId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("ProjectUsers", (string)null);

                    b.HasData(
                        new
                        {
                            AssignedUsersId = 1,
                            ProjectsId = 1
                        },
                        new
                        {
                            AssignedUsersId = 2,
                            ProjectsId = 1
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "ali@example.com",
                            Name = "Ali",
                            RoleId = 1,
                            Surname = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            Mail = "ahmet.yilmaz@example.com",
                            Name = "Ahmet",
                            RoleId = 1,
                            Surname = "Yılmaz"
                        },
                        new
                        {
                            Id = 3,
                            Mail = "ayse@example.com",
                            Name = "Ayşe",
                            RoleId = 2,
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 4,
                            Mail = "ayse.kara@example.com",
                            Name = "Ayşe",
                            RoleId = 2,
                            Surname = "Kara"
                        },
                        new
                        {
                            Id = 5,
                            Mail = "muhammet@example.com",
                            Name = "Muhammet",
                            RoleId = 2,
                            Surname = "Deneme"
                        },
                        new
                        {
                            Id = 6,
                            Mail = "efe@example.com",
                            Name = "Efe",
                            RoleId = 3,
                            Surname = "Can"
                        },
                        new
                        {
                            Id = 7,
                            Mail = "mehmet.demir@example.com",
                            Name = "Mehmet",
                            RoleId = 3,
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 8,
                            Mail = "elif.celik@example.com",
                            Name = "Elif",
                            RoleId = 4,
                            Surname = "Çelik"
                        });
                });

            modelBuilder.Entity("ProjectTracker.Core.Entities.WorkItem", b =>
                {
                    b.HasOne("User", "AssignedUser")
                        .WithMany("WorkItems")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectTracker.Core.Entities.Project", "Project")
                        .WithMany("WorkItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("AssignedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTracker.Core.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("ProjectTracker.Core.Entities.Role", "Role")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProjectTracker.Core.Entities.Project", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("ProjectTracker.Core.Entities.Role", b =>
                {
                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("WorkItems");
                });
#pragma warning restore 612, 618
        }
    }
}
